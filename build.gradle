import org.flywaydb.core.Flyway

// ====================================================================================================
// Custom Plugins
// ====================================================================================================
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'org.flywaydb:flyway-core:4.0.3'
        classpath 'org.postgresql:postgresql:9.4.1212.jre7'
    }
}


// ====================================================================================================
// Plugins
// ====================================================================================================

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'



// ====================================================================================================
// Env config
// ====================================================================================================

final String TEST_CONFIG = "Config/test.env"
final String DEV_CONFIG = "Config/dev.env"


project.ext.configPath = TEST_CONFIG

task test_env {
    doLast {
        project.ext.configPath = TEST_CONFIG
    }
}

task dev_env {
    doLast {
        project.ext.configPath = DEV_CONFIG
    }
}


task loadConfig {
    doLast {
        def env = System.getenv("CONFIG_ENV")

        println "########################################################################"
        println "ENV - ${env}"
        if (env != null) {
            project.ext.configPath = "Config/${env}.env"
        }

        println "------------------------------------------------------------------------"
        println "Using ${configPath}"
        println "------------------------------------------------------------------------"

        def props = new Properties()
        file(configPath).withInputStream { props.load(it) }
        project.ext.config = props
    }
}
loadConfig.mustRunAfter clean


// The main class of the application
mainClassName = 'com.prakhar.ECommerceApplication'

// ====================================================================================================
// Global Variables
// ====================================================================================================

project.ext.dropwizardVersion = '0.9.2 '
project.ext.jerseyVersion = '2.23.2'

// ====================================================================================================
// Config initialization
// ====================================================================================================

compileJava.dependsOn loadConfig


///////////


group 'com.com.prakhar'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    itest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/itest/java')
        }
        resources.srcDir file('src/itest/resources')
    }
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

dependencies {
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-assets', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-hibernate', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-auth', version: dropwizardVersion

    compile group: 'io.dropwizard.modules', name: 'dropwizard-flyway', version: '1.0.0-1'

    compile 'org.postgresql:postgresql:9.4.1212.jre7'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
    compile group: 'com.smoketurner', name: 'dropwizard-swagger', version: '1.0.6-1'
    compile group: 'org.hibernate', name: 'hibernate-java8', version: '5.3.7.Final'

    def aws_libs_version = '1.11.271'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: aws_libs_version
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: aws_libs_version
    compile group: 'com.amazonaws', name: 'aws-java-sdk-ssm', version: aws_libs_version
    compile group: 'com.amazonaws', name: 'aws-java-sdk-ses', version: aws_libs_version
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: aws_libs_version

    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
    compile group: 'io.symphonia', name: 'lambda-logging', version: '1.0.1'

    compile ('com.google.api-client:google-api-client:1.23.0') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    compile 'com.google.apis:google-api-services-sheets:v4-rev108-1.22.0'
    compile 'com.google.apis:google-api-services-drive:v2-rev264-1.22.0'
    compile group: 'com.plivo', name: 'plivo-java', version: '3.0.9'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
    compile 'org.jsoup:jsoup:1.10.2'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16'
    compile 'org.joda:joda-money:0.12'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.3.1'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.2.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.1'
    compile group: 'net.glxn', name: 'qrgen', version: '1.4'
    compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    compile 'com.google.firebase:firebase-admin:6.10.0'

    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
    testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: dropwizardVersion
    testCompile group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version: jerseyVersion
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

    // itest dependencies can be added like this:
    // itestCompile group: 'some-group', name: 'some-name', version: 'some-version'
}

// ====================================================================================================
// Flyway Database Migrations
// ====================================================================================================

ext.rootCauseMessage = { e ->
    while(e.getCause() != null) {
        e = e.getCause()
    }
    return e.getMessage()
}

ext.runFlywayTask = { task, db ->
    try {
        def url, user, pswd, location

            url = project.ext.config.getProperty("DATABASE_URL")
            user = project.ext.config.getProperty("DATABASE_USER")
            pswd = project.ext.config.getProperty("DATABASE_PSWD")
            location = "filesystem:${project.projectDir}/src/main/resources/db/migration"


        Flyway flyway = new Flyway();
        flyway.setDataSource(url, user, pswd);
        flyway.setDataSource(url, user, pswd);
        flyway.setLocations(location)
        flyway.getClass().getMethod(task).invoke(flyway)
    } catch (Exception e) {
        def message = rootCauseMessage(e)
        if (message.matches("FATAL: database .* does not exist")) {
            message += "\n" +
                    "----------------------------------------------------------------------\n" +
                    "Run the following commands to create the database:\n" +
                    "\n" +
                    "\$ psql\n" +
                    "# create database <db-name> with owner accelerate;  \n" +
                    "# \\c <db-name>\n" +
                    "# grant all privileges on all tables in schema PUBLIC to accelerate;\n" +
                    "----------------------------------------------------------------------"
        }
        throw new GradleException(message)
    }
}

task mainDbFlywayClean(dependsOn: loadConfig) {
    doLast {
        runFlywayTask("clean", "main")
    }
}

task mainDbFlywayMigrate(dependsOn: loadConfig) {
    doLast {
        runFlywayTask("migrate", "main")
    }
}


task flywayClean(dependsOn: [mainDbFlywayClean])
task flywayMigrate(dependsOn: [mainDbFlywayMigrate])

flywayMigrate.mustRunAfter flywayClean

compileJava.dependsOn flywayMigrate

// ====================================================================================================
// Fat Jar
// ====================================================================================================
shadowJar {
    mergeServiceFiles()
    mainClassName = 'com.prakhar.ECommerce'
    baseName = 'ecommerce'
    classifier ='release'
    version =  version
}
// ====================================================================================================
// Unit Tests
// ====================================================================================================

test {
    // Ensure we run tests only for test environments
    onlyIf {
        configPath.endsWith("test.env")
    }

    doFirst {
        environment "CONFIG_PATH", configPath
    }

    if (project.hasProperty('excludeTests')) {
        exclude project.property('excludeTests')
    }

    testLogging {
        exceptionFormat = 'full'
    }
}

// ====================================================================================================
// Integration Tests
// ====================================================================================================
task itest(type: Test, dependsOn: [clean, flywayClean, flywayMigrate, compileItestJava]) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
    outputs.upToDateWhen { false }

    // Ensure we run tests only for test environments
    onlyIf {
        configPath.endsWith("test.env")
    }

    doFirst {
        environment "CONFIG_PATH", configPath
    }

    if (project.hasProperty('excludeTests')) {
        exclude project.property('excludeTests')
    }

    testLogging {
        exceptionFormat = 'full'
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

// ====================================================================================================
// Run server
// ====================================================================================================

run {
    environment "CONFIG_PATH", DEV_CONFIG
    args "server", "ecommerce.yml"
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=40004"]
}


// ====================================================================================================
// Misc
// ====================================================================================================
task getHomeDir {
    doLast {
        println gradle.gradleHomeDir
    }
}



task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

jar {
    manifest {
        attributes(
                'Implementation-Version': version,
                "Main-Class": mainClassName
        )
    }

    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {}
}